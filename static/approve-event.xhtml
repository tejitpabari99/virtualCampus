<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <title>
        Approve Events
    </title>
    <meta content="" />
</head>

<body>
<div>
    <p>Approve events for CVC.</p>
    <p>Steps:</p>
    <li>Enter the client id for CVC in the prompt if it appears.</li>
    <li>Enter the API key for CVC in the prompt if it appears. This is done once per browser session.</li>
    <li>Authenticate with the CVC email account by clicking the authorize button.</li>
    <li>When the page loads or is reloaded, enter the JSON for
        the event into the popup box and wait for the link to the event to appear
        below.</li>
</div>
<p>
    Note: When you click on the link for the new event and view it on the CVC email,
    you may get a warning that the event couldn't be found. You should be able
    to see the event on the calendar anyways so you can safely ignore the
    warning.
</p>
<!--  Add buttons to initiate auth sequence and sign out -->
<button id="authorize_button" style="display: none;">Authorize</button>
<button id="signout_button" style="display: none;">Sign Out</button>
<p id="content" style="white-space: pre-wrap;"></p>
<script type="text/javascript" xml:space="preserve">//<![CDATA[
// Client ID and API key from the Developer Console
var CLIENT_ID = localStorage.getItem("CLIENT_ID");
console.log("CLIENT ID " + CLIENT_ID);
var API_KEY = localStorage.getItem("API_KEY");
if (CLIENT_ID === null) {
    CLIENT_ID = prompt("Enter client id");
    localStorage.setItem("CLIENT_ID", CLIENT_ID);
}

if (API_KEY === null) {
    API_KEY = prompt("Enter API key");
    localStorage.setItem("API_KEY", API_KEY);
}

// Array of API discovery doc URLs for APIs used by the quickstart
var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];

// Authorization scopes required by the API.
var SCOPES = "https://www.googleapis.com/auth/calendar";
var CALENDAR_ID = "d56ga59rg84jrtarcpjl78p5no@group.calendar.google.com";

var authorizeButton = document.getElementById('authorize_button');
var signoutButton = document.getElementById('signout_button');

/**
 *  On load, called to load the auth2 library and API client library.
 */
function handleClientLoad() {
    console.log("RELOAD!!!!");
    gapi.load('client:auth2', initClient);
}

/**
 *  Initializes the API client library and sets up sign-in state
 *  listeners.
 */
function initClient() {
    gapi.client.init({
        apiKey: API_KEY,
        clientId: CLIENT_ID,
        discoveryDocs: DISCOVERY_DOCS,
        scope: SCOPES
    }).then(function () {
        // Listen for sign-in state changes.
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

        // Handle the initial sign-in state.
        updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
        authorizeButton.onclick = handleAuthClick;
        signoutButton.onclick = handleSignoutClick;
    }, function (error) {
        appendPre(JSON.stringify(error, null, 2));
    });
}

/**
 *  Called when the signed in status changes, to update the UI
 *  appropriately. After a sign-in, the API is called.
 */
function updateSigninStatus(isSignedIn) {
    if (isSignedIn) {
        authorizeButton.style.display = 'none';
        signoutButton.style.display = 'block';
        //  listUpcomingEvents();
        addEvent();
    } else {
        authorizeButton.style.display = 'block';
        signoutButton.style.display = 'none';
    }
}

/**
 *  Sign in the user upon button click.
 */
function handleAuthClick(event) {
    gapi.auth2.getAuthInstance().signIn();
}

/**
 *  Sign out the user upon button click.
 */
function handleSignoutClick(event) {
    gapi.auth2.getAuthInstance().signOut();
}

/**
 * Append a pre element to the body containing the given message
 * as its text node. Used to display the results of the API call.
 *
 * @param {string} message Text to be placed in pre element.
 */
function appendPre(message) {
    var pre = document.getElementById('content');
    var textContent = document.createTextNode(message + '\n');
    pre.appendChild(textContent);
}

/**
 * Print the summary and start datetime/date of the next ten events in
 * the authorized user's calendar. If no events are found an
 * appropriate message is printed.
 */
function listUpcomingEvents() {
    gapi.client.calendar.events.list({
        'calendarId': CALENDAR_ID,
        'timeMin': (new Date()).toISOString(),
        'showDeleted': false,
        'singleEvents': true,
        'maxResults': 100000,
        'orderBy': 'updated'
    }).then(function (response) {
        var events = response.result.items;
        appendPre('Upcoming events:');

        if (events.length > 0) {
            for (i = 0; i < events.length; i++) {
                var event = events[i];
                var when = event.start.dateTime;
                if (!when) {
                    when = event.start.date;
                }
                appendPre(event.summary + ' (' + when + ')' + event.htmlLink);
            }
        } else {
            appendPre('No upcoming events found.');
        }
    });
}

function addEvent() {
    var event = JSON.parse(prompt("Enter the JSON for the event", "{}"));

    var request = gapi.client.calendar.events.insert({
        'calendarId': CALENDAR_ID,
        'resource': event
    });

    request.execute(function (event) {
        var a = document.createElement('a');
        var link = document.createTextNode("Link to new event: " + event.htmlLink);

        a.appendChild(link);
        a.title = "New event for CVC";
        a.href = event.htmlLink;
        a.target = "_blank";

        document.body.appendChild(a);
    });

    return;

}
//]]></script>
<script defer="defer" src="https://apis.google.com/js/api.js" type="text/javascript" xml:space="preserve"
        onload="this.onload=function(){};handleClientLoad()">//<![CDATA[
//]]></script>
</body>

</html>